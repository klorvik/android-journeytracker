package dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import entity.Coordinate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COORDINATE.
*/
public class CoordinateDao extends AbstractDao<Coordinate, Long> {

    public static final String TABLENAME = "COORDINATE";

    /**
     * Properties of entity Coordinate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Latitude = new Property(1, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(2, double.class, "longitude", false, "LONGITUDE");
        public final static Property Elevation = new Property(3, Double.class, "elevation", false, "ELEVATION");
        public final static Property CreatedAt = new Property(4, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property JourneyId = new Property(5, long.class, "journeyId", false, "JOURNEY_ID");
    };

    private DaoSession daoSession;

    private Query<Coordinate> journey_CoordinatesQuery;

    public CoordinateDao(DaoConfig config) {
        super(config);
    }
    
    public CoordinateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COORDINATE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LATITUDE' REAL NOT NULL ," + // 1: latitude
                "'LONGITUDE' REAL NOT NULL ," + // 2: longitude
                "'ELEVATION' REAL," + // 3: elevation
                "'CREATED_AT' INTEGER," + // 4: createdAt
                "'JOURNEY_ID' INTEGER NOT NULL );"); // 5: journeyId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COORDINATE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Coordinate entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getLatitude());
        stmt.bindDouble(3, entity.getLongitude());
 
        Double elevation = entity.getElevation();
        if (elevation != null) {
            stmt.bindDouble(4, elevation);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(5, createdAt.getTime());
        }
        stmt.bindLong(6, entity.getJourneyId());
    }

    @Override
    protected void attachEntity(Coordinate entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Coordinate readEntity(Cursor cursor, int offset) {
        Coordinate entity = new Coordinate( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getDouble(offset + 1), // latitude
            cursor.getDouble(offset + 2), // longitude
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // elevation
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // createdAt
            cursor.getLong(offset + 5) // journeyId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Coordinate entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLatitude(cursor.getDouble(offset + 1));
        entity.setLongitude(cursor.getDouble(offset + 2));
        entity.setElevation(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setCreatedAt(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setJourneyId(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Coordinate entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Coordinate entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "coordinates" to-many relationship of Journey. */
    public List<Coordinate> _queryJourney_Coordinates(long journeyId) {
        synchronized (this) {
            if (journey_CoordinatesQuery == null) {
                QueryBuilder<Coordinate> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.JourneyId.eq(null));
                journey_CoordinatesQuery = queryBuilder.build();
            }
        }
        Query<Coordinate> query = journey_CoordinatesQuery.forCurrentThread();
        query.setParameter(0, journeyId);
        return query.list();
    }

}
