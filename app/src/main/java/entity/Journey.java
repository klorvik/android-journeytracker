package entity;

import java.io.Serializable;
import java.util.List;

import android.util.Log;
import dao.CoordinateDao;
import dao.DaoSession;
import dao.JourneyDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table JOURNEY.
 */
public class Journey {

    private Long id;
    /** Not-null value. */
    private String name;
    private Double distance;
    private java.util.Date createdAt;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient JourneyDao myDao;

    private List<Coordinate> coordinates;

    public Journey() {
    }

    public Journey(Long id) {
        this.id = id;
    }

    public Journey(Long id, String name, Double distance, java.util.Date createdAt) {
        this.id = id;
        this.name = name;
        this.distance = distance;
        this.createdAt = createdAt;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getJourneyDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public Double getDistance() {
        return distance;
    }

    public void setDistance(Double distance) {
        this.distance = distance;
    }

    public java.util.Date getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(java.util.Date createdAt) {
        this.createdAt = createdAt;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Coordinate> getCoordinates() {
        if (coordinates == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CoordinateDao targetDao = daoSession.getCoordinateDao();
            List<Coordinate> coordinatesNew = targetDao._queryJourney_Coordinates(id);
            synchronized (this) {
                if(coordinates == null) {
                    coordinates = coordinatesNew;
                }
            }
        }
        return coordinates;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCoordinates() {
        coordinates = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    public String toString(){
        int numberOfCoordinates = 0;
        String date = "N/A";

        if(coordinates != null) numberOfCoordinates = coordinates.size();
        if(createdAt != null) date = createdAt.toString();

        return "ID: " + id + " - Name: " + name + " - Date: " + date + " - Total distance: " + distance + "m";
    }

}
